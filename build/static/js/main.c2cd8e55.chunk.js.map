{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Navbar/Navbar.js","components/Footer/Footer.js","components/ImageCard/ImageCard.js","components/GameContainer/GameContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Component","Navbar","Footer","ImageCard","props","key","id","onClick","handleClick","clicked","name","src","image","alt","GameContainer","state","images","message","score","topScore","console","log","imageOrder","_this","forEach","index","setState","sort","b","Math","random","_this$state","newScore","newTopScore","_this2","this","map","components_ImageCard_ImageCard","App","Navbar_Navbar_Navbar","Jumbotron_Jumbotron_Jumbotron","GameContainer_GameContainer_GameContainer","Footer_Footer_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c2cd8e55.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./Jumbotron.css\";\n\nexport default class Jumbotron extends Component {\n  render() {\n    return (\n        <div>\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                    <h1 className=\"display-4\">Mario Memory Game</h1>\n                    <p className=\"lead\">Click an Image to start the game. Don't Click an image twice!</p>\n                </div>\n            </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport \"./Navbar.css\"\n\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <div className=\"fixed-top\"><p>Click it or Ticket!</p></div>\n             \n           \n    )\n  }\n}","import React, { Component } from 'react';\nimport \"./Footer.css\"\n\nexport default class Footer extends Component {\n  render() {\n    return (\n        <div className=\"fixed-bottom\"><p>Copyright Â© 2018 Navdeep Singh</p></div>\n              \n       \n    )\n  }\n}","import React from \"react\";\nimport \"./ImageCard.css\";\n\nconst ImageCard = props => (\n  <div className=\"card col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\" key={props.id} onClick={()=> props.handleClick(props.id, props.clicked)}>\n      <img \n\t\tid={props.name}\n\t\tsrc={props.image}\n\t\talt={props.name}\n\t\t/>\n    <div className=\"content\">\n      <strong>{props.name}</strong>\n    </div>\n  </div>\n);\n\nexport default ImageCard;\n","import React, { Component } from 'react';\nimport ImageCard from \"../ImageCard/ImageCard.js\";\nimport images from \"../../images.json\";\nimport \"./GameContainer.css\";\n\nexport default class GameContainer extends Component {\n    state = {\n      images,\n      message: \"Click on an image to begin!\",\n      score: 0,\n      topScore: 0\n    };\n\n    handleClick = (id, clicked) => {\n      console.log(\"clicked\");\n      console.log(id, \"hello\");\n\n      const imageOrder = this.state.images;\n\n      if (clicked){\n        imageOrder.forEach((image, index) => {\n          imageOrder[index].clicked = false;\n        });\n        return this.setState({\n          image: imageOrder.sort(function(a, b){return 0.5 - Math.random()}),\n          message: \"You guessed incorrectly!\",\n          score: 0\n        })\n\n      }\n       else{\n         imageOrder.forEach((image, index) => {\n          if(id === image.id){imageOrder[index].clicked = true;}\n         })\n\n         const { topScore, score } = this.state;\n         const newScore = score + 1;\n         const newTopScore = newScore > topScore ? newScore : topScore;\n         return this.setState({\n          image: imageOrder.sort(function(a, b){return 0.5 - Math.random()}),\n          message: \"You guessed Correctly!\",\n          score: newScore,\n          topScore: newTopScore\n         })\n       }\n    }\n\n\n  render() {\n    return (\n      <div className=\"container-fluid gameContainer\">\n         <div className=\"gameMessage text-center\" > \n            <p>{this.state.message} </p>\n        </div>\n        <div className=\"gameScores text-center\" > \n            <p> Score: {this.state.score} |  Top Score: {this.state.topScore} </p>\n        </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.images.map(image =>(\n              <ImageCard \n                key={image.id}\n                id={image.id}\n                name={image.name}\n                clicked={image.clicked}\n                image={image.image}\n                handleClick={this.handleClick}\n                />\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Jumbotron from \"./components/Jumbotron/Jumbotron.js\";\nimport Navbar from \"./components/Navbar/Navbar.js\";\nimport Footer from \"./components/Footer/Footer.js\";\nimport GameContainer from \"./components/GameContainer/GameContainer.js\";\n// import ImageCard from \"./components/ImageCard/ImageCard.js\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid mainContainer\">\n        <Navbar />\n        <Jumbotron />\n        <GameContainer />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}